// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: buffer.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GomokuBuffer {
  public static partial class Game
  {
    static readonly string __ServiceName = "gomokuBuffer.Game";

    static readonly grpc::Marshaller<global::GomokuBuffer.InitGameRequest> __Marshaller_gomokuBuffer_InitGameRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GomokuBuffer.InitGameRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GomokuBuffer.InitGameResponse> __Marshaller_gomokuBuffer_InitGameResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GomokuBuffer.InitGameResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GomokuBuffer.StonePlayed> __Marshaller_gomokuBuffer_StonePlayed = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GomokuBuffer.StonePlayed.Parser.ParseFrom);

    static readonly grpc::Method<global::GomokuBuffer.InitGameRequest, global::GomokuBuffer.InitGameResponse> __Method_InitGame = new grpc::Method<global::GomokuBuffer.InitGameRequest, global::GomokuBuffer.InitGameResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InitGame",
        __Marshaller_gomokuBuffer_InitGameRequest,
        __Marshaller_gomokuBuffer_InitGameResponse);

    static readonly grpc::Method<global::GomokuBuffer.StonePlayed, global::GomokuBuffer.StonePlayed> __Method_Played = new grpc::Method<global::GomokuBuffer.StonePlayed, global::GomokuBuffer.StonePlayed>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Played",
        __Marshaller_gomokuBuffer_StonePlayed,
        __Marshaller_gomokuBuffer_StonePlayed);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GomokuBuffer.BufferReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Game</summary>
    public abstract partial class GameBase
    {
      public virtual global::System.Threading.Tasks.Task<global::GomokuBuffer.InitGameResponse> InitGame(global::GomokuBuffer.InitGameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GomokuBuffer.StonePlayed> Played(global::GomokuBuffer.StonePlayed request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Game</summary>
    public partial class GameClient : grpc::ClientBase<GameClient>
    {
      /// <summary>Creates a new client for Game</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GameClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Game that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GameClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GameClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GameClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::GomokuBuffer.InitGameResponse InitGame(global::GomokuBuffer.InitGameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GomokuBuffer.InitGameResponse InitGame(global::GomokuBuffer.InitGameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InitGame, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GomokuBuffer.InitGameResponse> InitGameAsync(global::GomokuBuffer.InitGameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GomokuBuffer.InitGameResponse> InitGameAsync(global::GomokuBuffer.InitGameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InitGame, null, options, request);
      }
      public virtual global::GomokuBuffer.StonePlayed Played(global::GomokuBuffer.StonePlayed request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Played(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GomokuBuffer.StonePlayed Played(global::GomokuBuffer.StonePlayed request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Played, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GomokuBuffer.StonePlayed> PlayedAsync(global::GomokuBuffer.StonePlayed request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlayedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GomokuBuffer.StonePlayed> PlayedAsync(global::GomokuBuffer.StonePlayed request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Played, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GameClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GameClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GameBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_InitGame, serviceImpl.InitGame)
          .AddMethod(__Method_Played, serviceImpl.Played).Build();
    }

  }
}
#endregion
