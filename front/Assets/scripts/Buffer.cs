// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: buffer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GrpcBuffer {

  /// <summary>Holder for reflection information generated from buffer.proto</summary>
  public static partial class BufferReflection {

    #region Descriptor
    /// <summary>File descriptor for buffer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BufferReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxidWZmZXIucHJvdG8SCmdycGNCdWZmZXIiIgoKVmVjdG9yMkludBIJCgF4",
            "GAEgASgFEgkKAXkYAiABKAUiUgoETm9kZRIoCghwb3NBcnJheRgBIAEoCzIW",
            "LmdycGNCdWZmZXIuVmVjdG9yMkludBIOCgZwbGF5ZXIYAiABKAUSEAoIY2Fw",
            "dGVyZWQYAyABKAgiQgoPaW5pdEdhbWVSZXF1ZXN0Eh8KBWJvYXJkGAEgAygL",
            "MhAuZ3JwY0J1ZmZlci5Ob2RlEg4KBmdhbWVJZBgCIAEoCSIjChBpbml0R2Ft",
            "ZVJlc3BvbnNlEg8KB21lc3NhZ2UYASABKAkiPgoPcGxheWVkQUlSZXF1ZXN0",
            "EisKEWN1cnJlbnRQbGF5ZXJNb3ZlGAIgASgLMhAuZ3JwY0J1ZmZlci5Ob2Rl",
            "ImMKEHBsYXllZEFJUmVzcG9uc2USJwoNY3VycmVudEFJTW92ZRgBIAEoCzIQ",
            "LmdycGNCdWZmZXIuTm9kZRImCgxoZWxwZXJQbGF5ZXIYAiADKAsyEC5ncnBj",
            "QnVmZmVyLk5vZGUyoQEKCWdhbWVTZXJ2ZRJHCghpbml0R2FtZRIbLmdycGNC",
            "dWZmZXIuaW5pdEdhbWVSZXF1ZXN0GhwuZ3JwY0J1ZmZlci5pbml0R2FtZVJl",
            "c3BvbnNlIgASSwoIcGxheWVkQUkSGy5ncnBjQnVmZmVyLnBsYXllZEFJUmVx",
            "dWVzdBocLmdycGNCdWZmZXIucGxheWVkQUlSZXNwb25zZSIAKAEwAWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBuffer.Vector2Int), global::GrpcBuffer.Vector2Int.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBuffer.Node), global::GrpcBuffer.Node.Parser, new[]{ "PosArray", "Player", "Captered" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBuffer.initGameRequest), global::GrpcBuffer.initGameRequest.Parser, new[]{ "Board", "GameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBuffer.initGameResponse), global::GrpcBuffer.initGameResponse.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBuffer.playedAIRequest), global::GrpcBuffer.playedAIRequest.Parser, new[]{ "CurrentPlayerMove" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBuffer.playedAIResponse), global::GrpcBuffer.playedAIResponse.Parser, new[]{ "CurrentAIMove", "HelperPlayer" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Vector2Int : pb::IMessage<Vector2Int> {
    private static readonly pb::MessageParser<Vector2Int> _parser = new pb::MessageParser<Vector2Int>(() => new Vector2Int());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector2Int> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcBuffer.BufferReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2Int() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2Int(Vector2Int other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2Int Clone() {
      return new Vector2Int(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector2Int);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector2Int other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector2Int other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Node : pb::IMessage<Node> {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcBuffer.BufferReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      posArray_ = other.posArray_ != null ? other.posArray_.Clone() : null;
      player_ = other.player_;
      captered_ = other.captered_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "posArray" field.</summary>
    public const int PosArrayFieldNumber = 1;
    private global::GrpcBuffer.Vector2Int posArray_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcBuffer.Vector2Int PosArray {
      get { return posArray_; }
      set {
        posArray_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private int player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "captered" field.</summary>
    public const int CapteredFieldNumber = 3;
    private bool captered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Captered {
      get { return captered_; }
      set {
        captered_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PosArray, other.PosArray)) return false;
      if (Player != other.Player) return false;
      if (Captered != other.Captered) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (posArray_ != null) hash ^= PosArray.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      if (Captered != false) hash ^= Captered.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (posArray_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PosArray);
      }
      if (Player != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Player);
      }
      if (Captered != false) {
        output.WriteRawTag(24);
        output.WriteBool(Captered);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (posArray_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PosArray);
      }
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
      }
      if (Captered != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.posArray_ != null) {
        if (posArray_ == null) {
          posArray_ = new global::GrpcBuffer.Vector2Int();
        }
        PosArray.MergeFrom(other.PosArray);
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.Captered != false) {
        Captered = other.Captered;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (posArray_ == null) {
              posArray_ = new global::GrpcBuffer.Vector2Int();
            }
            input.ReadMessage(posArray_);
            break;
          }
          case 16: {
            Player = input.ReadInt32();
            break;
          }
          case 24: {
            Captered = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class initGameRequest : pb::IMessage<initGameRequest> {
    private static readonly pb::MessageParser<initGameRequest> _parser = new pb::MessageParser<initGameRequest>(() => new initGameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<initGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcBuffer.BufferReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public initGameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public initGameRequest(initGameRequest other) : this() {
      board_ = other.board_.Clone();
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public initGameRequest Clone() {
      return new initGameRequest(this);
    }

    /// <summary>Field number for the "board" field.</summary>
    public const int BoardFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GrpcBuffer.Node> _repeated_board_codec
        = pb::FieldCodec.ForMessage(10, global::GrpcBuffer.Node.Parser);
    private readonly pbc::RepeatedField<global::GrpcBuffer.Node> board_ = new pbc::RepeatedField<global::GrpcBuffer.Node>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GrpcBuffer.Node> Board {
      get { return board_; }
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 2;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as initGameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(initGameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!board_.Equals(other.board_)) return false;
      if (GameId != other.GameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= board_.GetHashCode();
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      board_.WriteTo(output, _repeated_board_codec);
      if (GameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += board_.CalculateSize(_repeated_board_codec);
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(initGameRequest other) {
      if (other == null) {
        return;
      }
      board_.Add(other.board_);
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            board_.AddEntriesFrom(input, _repeated_board_codec);
            break;
          }
          case 18: {
            GameId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class initGameResponse : pb::IMessage<initGameResponse> {
    private static readonly pb::MessageParser<initGameResponse> _parser = new pb::MessageParser<initGameResponse>(() => new initGameResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<initGameResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcBuffer.BufferReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public initGameResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public initGameResponse(initGameResponse other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public initGameResponse Clone() {
      return new initGameResponse(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as initGameResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(initGameResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(initGameResponse other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class playedAIRequest : pb::IMessage<playedAIRequest> {
    private static readonly pb::MessageParser<playedAIRequest> _parser = new pb::MessageParser<playedAIRequest>(() => new playedAIRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<playedAIRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcBuffer.BufferReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public playedAIRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public playedAIRequest(playedAIRequest other) : this() {
      currentPlayerMove_ = other.currentPlayerMove_ != null ? other.currentPlayerMove_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public playedAIRequest Clone() {
      return new playedAIRequest(this);
    }

    /// <summary>Field number for the "currentPlayerMove" field.</summary>
    public const int CurrentPlayerMoveFieldNumber = 2;
    private global::GrpcBuffer.Node currentPlayerMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcBuffer.Node CurrentPlayerMove {
      get { return currentPlayerMove_; }
      set {
        currentPlayerMove_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as playedAIRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(playedAIRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CurrentPlayerMove, other.CurrentPlayerMove)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (currentPlayerMove_ != null) hash ^= CurrentPlayerMove.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (currentPlayerMove_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CurrentPlayerMove);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (currentPlayerMove_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentPlayerMove);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(playedAIRequest other) {
      if (other == null) {
        return;
      }
      if (other.currentPlayerMove_ != null) {
        if (currentPlayerMove_ == null) {
          currentPlayerMove_ = new global::GrpcBuffer.Node();
        }
        CurrentPlayerMove.MergeFrom(other.CurrentPlayerMove);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (currentPlayerMove_ == null) {
              currentPlayerMove_ = new global::GrpcBuffer.Node();
            }
            input.ReadMessage(currentPlayerMove_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class playedAIResponse : pb::IMessage<playedAIResponse> {
    private static readonly pb::MessageParser<playedAIResponse> _parser = new pb::MessageParser<playedAIResponse>(() => new playedAIResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<playedAIResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcBuffer.BufferReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public playedAIResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public playedAIResponse(playedAIResponse other) : this() {
      currentAIMove_ = other.currentAIMove_ != null ? other.currentAIMove_.Clone() : null;
      helperPlayer_ = other.helperPlayer_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public playedAIResponse Clone() {
      return new playedAIResponse(this);
    }

    /// <summary>Field number for the "currentAIMove" field.</summary>
    public const int CurrentAIMoveFieldNumber = 1;
    private global::GrpcBuffer.Node currentAIMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcBuffer.Node CurrentAIMove {
      get { return currentAIMove_; }
      set {
        currentAIMove_ = value;
      }
    }

    /// <summary>Field number for the "helperPlayer" field.</summary>
    public const int HelperPlayerFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GrpcBuffer.Node> _repeated_helperPlayer_codec
        = pb::FieldCodec.ForMessage(18, global::GrpcBuffer.Node.Parser);
    private readonly pbc::RepeatedField<global::GrpcBuffer.Node> helperPlayer_ = new pbc::RepeatedField<global::GrpcBuffer.Node>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GrpcBuffer.Node> HelperPlayer {
      get { return helperPlayer_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as playedAIResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(playedAIResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CurrentAIMove, other.CurrentAIMove)) return false;
      if(!helperPlayer_.Equals(other.helperPlayer_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (currentAIMove_ != null) hash ^= CurrentAIMove.GetHashCode();
      hash ^= helperPlayer_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (currentAIMove_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CurrentAIMove);
      }
      helperPlayer_.WriteTo(output, _repeated_helperPlayer_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (currentAIMove_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentAIMove);
      }
      size += helperPlayer_.CalculateSize(_repeated_helperPlayer_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(playedAIResponse other) {
      if (other == null) {
        return;
      }
      if (other.currentAIMove_ != null) {
        if (currentAIMove_ == null) {
          currentAIMove_ = new global::GrpcBuffer.Node();
        }
        CurrentAIMove.MergeFrom(other.CurrentAIMove);
      }
      helperPlayer_.Add(other.helperPlayer_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (currentAIMove_ == null) {
              currentAIMove_ = new global::GrpcBuffer.Node();
            }
            input.ReadMessage(currentAIMove_);
            break;
          }
          case 18: {
            helperPlayer_.AddEntriesFrom(input, _repeated_helperPlayer_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
